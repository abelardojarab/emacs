(setq projectile-globally-ignored-directories '(".idea"
						".ensime_cache"
						".eunit"
						".git"
						".old"
						".hg"
						".fslckout"
						"_FOSSIL_"
						".bzr"
						"_darcs"
						".tox"
						".svn"
						".stack-work"
						"~/.emacs.d/quelpa"))

(setq projectile-globally-ignored-buffers '(".*Log.*"
					    ".*log.*"
					    ".*help.*"
					    "^#.*#$"
					    "*Shell Command Output*"
					    "*Calculator*"
					    "*Calendar*"
					    "*Help*"
					    "*Calc Trail*"
					    "magit-process"
					    "magit-diff"
					    "*Org-Babel Error Output*"
					    "\\`\\*helm"
					    "\\`\\*Echo Area"
					    "\\`\\*Minibuf"
					    "Ibuffer"
					    "*Shell Command Output*"
					    "*Calculator*"
					    "*Calendar*"
					    "*cheatsheet*"
					    "*Help*"
					    "*Echo Area 0*"
					    "*Echo Area 1"
					    "*Minibuf 0*"
					    "*Minibuf-1*"
					    "bookmark-default.el"
					    "info-history"
					    "company-shell-autoloads.el"
					    "company.el"
					    "pos-tip-autoloads.el"
					    "*scratch*"
					    "*Warning*"
					    "*Messages*"
					    "^init.org$"
					    "^packs.org$"
					    "^functions.org$"
					    "^keys.org$"
					    "^misc.org$"
					    "^macros.org$"
					    "^hydras.org$"
					    "^links.org$"
					    "^custom.el$"
					    "*Flycheck error messages*"
					    "*Flymake log*"
					    "*company-documentation*"
					    "^.archive.org$"
					    ".*magit.*"
					    ".*elc"
					    ".*pdf"
					    "*shell*"
					    "*new*"
					    "*Flycheck error messages*"
					    "*clang-output*"
					    "*Bongo Playlist*"
					    "*eclim: problems*"
					    "*eclimd*"
					    "*compilation*"
					    "*Bongo Library*"
					    "*Outline pcc.pdf*"
					    "*blacken*"
					    "*server*"
					    "*code-conversion-work*"
					    "*blacken-error*"
					    "*Outline pcc_2.pdf*"
					    "*quickrun*"))

(setq projectile-globally-ignored-modes '("erc-mode" "help-mode" "completion-list-mode" "Buffer-menu-mode" "gnus-.*-mode" "occur-mode"))
(setq projectile-project-search-path '("~"))

(setq projectile-mode-line-prefix " <p>")
(setq projectile-mode-line-function '(lambda () (format " <p> [%s]" (projectile-project-name))))
